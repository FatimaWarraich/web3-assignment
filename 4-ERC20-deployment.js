const Tx     = require('ethereumjs-tx').Transaction
const Web3 = require('web3')
const web3 = new Web3('https://ropsten.infura.io/v3/6f6b89c434f94ab68a1f252f4a8a874f')

const account1 = '0x0ED5E88B944b3354fBb53866baDD02AFD2968d91' // Your account address 1
const account2 = '0x8c04f0867D986cFed598f3863b1bE610f2e8663B' // Your account address 2

const privateKey1 = Buffer.from('4eefbf9166a5421372ca422d147272f16b354e4bd0e0e1c85b49195eb294cbd5', 'hex')
const privateKey2 = Buffer.from('f0be007eb1d4201c22ff29ee43513ed750a1d4089f3c8b4cd903b8598f9fbc4e', 'hex')

const data = '0x6080604052600436106100915760003560e01c8063a9059cbb11610059578063a9059cbb14610160578063bfba39ae14610180578063c1e57918146101a0578063dd62ed3e146101b3578063f2fde38b146101f957600080fd5b8063095ea7b31461009657806318160ddd146100cb57806323b872dd146100ea57806370a082311461010a57806391b7f5ed14610140575b600080fd5b3480156100a257600080fd5b506100b66100b13660046109dc565b610219565b60405190151581526020015b60405180910390f35b3480156100d757600080fd5b506000545b6040519081526020016100c2565b3480156100f657600080fd5b506100b66101053660046109a0565b610285565b34801561011657600080fd5b506100dc61012536600461094b565b6001600160a01b031660009081526006602052604090205490565b34801561014c57600080fd5b506100dc61015b366004610a06565b6104de565b34801561016c57600080fd5b506100b661017b3660046109dc565b610577565b34801561018c57600080fd5b506100b661019b36600461094b565b610680565b6100b66101ae366004610a06565b6106bb565b3480156101bf57600080fd5b506100dc6101ce36600461096d565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b34801561020557600080fd5b506100b661021436600461094b565b610889565b3360008181526007602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102749086815260200190565b60405180910390a350600192915050565b6001600160a01b0383166000908152600660205260408120548211156102f25760405162461bcd60e51b815260206004820152601d60248201527f696e73756666696369656e742062616c616e6365206f66206f776e657200000060448201526064015b60405180910390fd5b6001600160a01b038416600090815260076020908152604080832033845290915290205482111561037c5760405162461bcd60e51b815260206004820152602e60248201527f416c6c6f77616e636520666f722064656c6567617465206f776e65722069732060448201526d1b9bdd081cdd59999a58da595b9d60921b60648201526084016102e9565b6001600160a01b0383166103dd5760405162461bcd60e51b815260206004820152602260248201527f6163636f756e742073686f756c64206e6f74206265207a656f72206164647265604482015261737360f01b60648201526084016102e9565b6001600160a01b038416600090815260066020526040902054610401908390610a56565b6001600160a01b0385166000908152600660209081526040808320939093556007815282822033835290522054610439908390610a56565b6001600160a01b038086166000908152600760209081526040808320338452825280832094909455918616815260069091522054610478908390610a1f565b6001600160a01b0380851660008181526006602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104cc9086815260200190565b60405180910390a35060019392505050565b6008546000906001600160a01b031633148061050457506005546001600160a01b031633145b61056a5760405162461bcd60e51b815260206004820152603160248201527f50726963652063616e206265206368616e676564206279206f776e6572206f7260448201527020627920617070726f766572206f6e6c7960781b60648201526084016102e9565b506009819055805b919050565b336000908152600660205260408120548211156105e75760405162461bcd60e51b815260206004820152602860248201527f796f7520646f6e2774206861766520656e6f75676820746f6b656e7320746f206044820152673a3930b739b332b960c11b60648201526084016102e9565b33600090815260066020526040902054610602908390610a56565b33600090815260066020526040808220929092556001600160a01b0385168152205461062f908390610a1f565b6001600160a01b0384166000818152600660205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906102749086815260200190565b6005546000906001600160a01b03163314156105725750600880546001600160a01b0383166001600160a01b03199091161790556001919050565b60008082116107185760405162461bcd60e51b8152602060048201526024808201527f53656e64204e756d206f6620546f6b656e732067726561746572207468616e206044820152637a65726f60e01b60648201526084016102e9565b3360009081526006602052604090205482111561073457600080fd5b6000600954836107449190610a37565b905030318111156107b65760405162461bcd60e51b815260206004820152603660248201527f436f6e747261637420646f6573204e6f74206861766520656e6f7567682062616044820152756c616e636520746f2072657475726e20746f6b656e7360501b60648201526084016102e9565b6040513390819083156108fc029084906000818181858888f193505050501580156107e5573d6000803e3d6000fd5b5033600090815260066020526040902054610801908590610a56565b33600090815260066020526040808220929092556005546001600160a01b031681522054610830908590610a1f565b600580546001600160a01b03908116600090815260066020908152604091829020949094559154915187815291169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016104cc565b6005546000906001600160a01b0316331415610572576001600160a01b03821661090f5760405162461bcd60e51b815260206004820152603160248201527f4f776e6572736869702063616e2774206265207472616e7366657272656420746044820152700379030903d32b9379030b2323932b9b99607d1b60648201526084016102e9565b50600580546001600160a01b0383166001600160a01b03199091161790556001919050565b80356001600160a01b038116811461057257600080fd5b60006020828403121561095d57600080fd5b61096682610934565b9392505050565b6000806040838503121561098057600080fd5b61098983610934565b915061099760208401610934565b90509250929050565b6000806000606084860312156109b557600080fd5b6109be84610934565b92506109cc60208501610934565b9150604084013590509250925092565b600080604083850312156109ef57600080fd5b6109f883610934565b946020939093013593505050565b600060208284031215610a1857600080fd5b5035919050565b60008219821115610a3257610a32610a6d565b500190565b6000816000190483118215151615610a5157610a51610a6d565b500290565b600082821015610a6857610a68610a6d565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220339e1347d5e7b4ed1634cae618481714be16d07838e346d508b694a19f740b1764736f6c63430008070033'


  const bufferData=Buffer.from(data,'hex');

// Deploy the contract
web3.eth.getTransactionCount(account1, (err, txCount) => {
    // Build the transaction
    const txObject = {
    nonce:web3.utils.toHex(txCount),
    gasLimit: web3.utils.toHex(7000000), // Raise the gas limit to a much higher amount
    gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),
    data: bufferData
  }
   // Sign the transaction
  const tx = new Tx(txObject,{chain:'ropsten'})
  tx.sign(privateKey1)

  const serializedTx = tx.serialize()
  const raw = '0x' + serializedTx.toString('hex')
  // Broadcast the transaction
  web3.eth.sendSignedTransaction(raw, (err, txHash) => {
    console.log('err:', err, 'txHash:', txHash)
    // Use this txHash to find the contract on Etherscan!
  })
})

// Read the deployed contract - get the addresss from Etherscan
const abi = require('./my_abi.json');
	
const contractAddress = '0x6c2e26686f1c3670B1A9bEb8d5004a16eB71BAf1'

const contract = new web3.eth.Contract(abi, contractAddress)

contract.methods.totalSupply().call((err, totalSupply) => { console.log('total supply', totalSupply)  })
contract.methods.balanceOf('0x0ED5E88B944b3354fBb53866baDD02AFD2968d91').call((err, balanceOf) => { console.log("balance of",balanceOf) })